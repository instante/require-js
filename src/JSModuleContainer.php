<?php

namespace Instante\RequireJS;


use Nette\Utils\Json;
use Tracy\Debugger;

class JSModuleContainer
{

    /** @var  string */
    private $dependenciesJsonPath;

    /** @var array */
    private $useModules = [];

    /** @var array */
    private $configurators = [];

    /** @var array */
    private $resolvedModules = [];

    /** @var array */
    private $dependencies;

    /** @var array */
    private $resolvedConfig = [];

    /**
     * @param string $dependenciesJsonPath path to RequireJSDependencies.json file generated by grunt
     */
    public function __construct($dependenciesJsonPath)
    {
        $this->dependenciesJsonPath = $dependenciesJsonPath;
    }


    /**
     * @param string $moduleName
     * @param array|callable $dataOrConfigurator
     * @return self
     */
    public function configureModule($moduleName, $dataOrConfigurator)
    {
        if (!isset($this->configurators[$moduleName])) {
            $this->configurators[$moduleName] = [];
        }

        $this->configurators[$moduleName][] = $dataOrConfigurator;
    }

    /**
     * @param string $moduleName
     * @param array|callable $dataOrConfigurator
     * @return self
     */
    public function useModule($moduleName, $dataOrConfigurator = NULL)
    {
        $this->useModules[$moduleName] = $moduleName;
        $this->configureModule($moduleName, $dataOrConfigurator);

        return $this;
    }

    /**
     * @return array JSON modules and data definition
     */
    public function getModules()
    {
        $this->resolvedConfig = [];
        $this->resolvedModules = [];

        foreach ($this->useModules as $moduleName) {
            $this->resolveModuleConfig($moduleName);
        }

        // so that dependendencies are required via js container with settings instead of pure requirejs definition
        // array is reversed to put dependents after their dependencies
        $this->resolvedConfig = array_reverse($this->resolvedConfig);
        if (class_exists('Tracy\Debugger')) {
            Debugger::barDump($this->resolvedConfig, __METHOD__);
        }

        return $this->resolvedConfig;
    }

    private function resolveModuleConfig($moduleName)
    {
        if (isset($this->resolvedModules[$moduleName])) {
            return;
        }
        $moduleConfig = [];
        if (isset($this->configurators[$moduleName])) {
            // e.g.
            // [
            //      ['src' => ...],
            //      callable,
            //      ['src2' => ...]
            // ]

            foreach ($this->configurators[$moduleName] as $moduleConfigurator) {
                if (is_callable($moduleConfigurator)) {
                    $moduleConfig = $moduleConfigurator($moduleConfig);
                } elseif (is_array($moduleConfigurator)) {
                    $moduleConfig = array_merge($moduleConfig, $moduleConfigurator);
                }
            }

            $this->resolvedConfig[] = [$moduleName => $moduleConfig];
        }

        $this->resolveModuleDependenciesConfig($moduleName);
        $this->resolvedModules[$moduleName] = TRUE;
    }

    private function resolveModuleDependenciesConfig($moduleName)
    {
        $dependencies = $this->getDependencies();
        if (!isset($dependencies[$moduleName])) {
            return; // unknown 3rd party module
        }

        foreach ($dependencies[$moduleName] as $moduleDependency) {
            if (isset($this->resolvedModules[$moduleDependency])) {
                continue;
            }
            $this->resolveModuleConfig($moduleDependency);
        }
    }

    private function getDependencies()
    {
        if (is_null($this->dependencies)) {
            $this->loadDependencies();
        }

        return $this->dependencies;
    }

    private static function jsonDecode($jsonString)
    {
        if (class_exists('Nette\Utils\Json')) {
            return Json::decode($jsonString, Json::FORCE_ARRAY);
        }
        else {
            return json_decode($jsonString, TRUE);
        }
    }

    private function loadDependencies()
    {
        $jsonString = file_get_contents($this->dependenciesJsonPath);
        $this->dependencies = self::jsonDecode($jsonString);
    }

}
